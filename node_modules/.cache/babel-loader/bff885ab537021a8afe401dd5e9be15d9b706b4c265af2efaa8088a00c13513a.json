{"ast":null,"code":"import React,{useState}from'react';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const SettingsScreen=_ref=>{let{onExport,onImport}=_ref;const[importData,setImportData]=useState('');const[message,setMessage]=useState('');const handleExport=()=>{const data=onExport();navigator.clipboard.writeText(data).then(()=>setMessage('Game data copied to clipboard!')).catch(()=>setMessage('Failed to copy. Please copy manually from textarea.'));setImportData(data);// Show it in textarea as well\n};const handleImport=()=>{if(window.confirm('Are you sure you want to import? This will overwrite your current game.')){try{onImport(importData);setMessage('Game data imported successfully!');}catch(error){setMessage('Error importing data. Is it valid?');console.error(\"Import error:\",error);}}};return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Settings\"}),/*#__PURE__*/_jsx(\"h3\",{children:\"Export Game\"}),/*#__PURE__*/_jsx(\"button\",{onClick:handleExport,children:\"Export to Clipboard & Textarea\"}),/*#__PURE__*/_jsx(\"h3\",{children:\"Import Game\"}),/*#__PURE__*/_jsx(\"textarea\",{value:importData,onChange:e=>setImportData(e.target.value),rows:10,cols:50,placeholder:\"Paste your game data here\",style:{backgroundColor:'#333',color:'#0f0',border:'1px solid #0a0',width:'100%',boxSizing:'border-box'}}),/*#__PURE__*/_jsx(\"button\",{onClick:handleImport,children:\"Import from Textarea\"}),message&&/*#__PURE__*/_jsx(\"p\",{children:message})]});};export default SettingsScreen;","map":{"version":3,"names":["React","useState","jsx","_jsx","jsxs","_jsxs","SettingsScreen","_ref","onExport","onImport","importData","setImportData","message","setMessage","handleExport","data","navigator","clipboard","writeText","then","catch","handleImport","window","confirm","error","console","children","onClick","value","onChange","e","target","rows","cols","placeholder","style","backgroundColor","color","border","width","boxSizing"],"sources":["/Users/dom/Desktop/github/RightClicker/src/screens/SettingsScreen.tsx"],"sourcesContent":["import React, { useState } from 'react';\n\ninterface SettingsScreenProps {\n  onExport: () => string;\n  onImport: (saveData: string) => void;\n}\n\nconst SettingsScreen: React.FC<SettingsScreenProps> = ({ onExport, onImport }) => {\n  const [importData, setImportData] = useState('');\n  const [message, setMessage] = useState('');\n\n  const handleExport = () => {\n    const data = onExport();\n    navigator.clipboard.writeText(data)\n      .then(() => setMessage('Game data copied to clipboard!'))\n      .catch(() => setMessage('Failed to copy. Please copy manually from textarea.'));\n    setImportData(data); // Show it in textarea as well\n  };\n\n  const handleImport = () => {\n    if (window.confirm('Are you sure you want to import? This will overwrite your current game.')) {\n      try {\n        onImport(importData);\n        setMessage('Game data imported successfully!');\n      } catch (error) {\n        setMessage('Error importing data. Is it valid?');\n        console.error(\"Import error:\", error);\n      }\n    }\n  };\n\n  return (\n    <div>\n      <h2>Settings</h2>\n      <h3>Export Game</h3>\n      <button onClick={handleExport}>Export to Clipboard & Textarea</button>\n      \n      <h3>Import Game</h3>\n      <textarea\n        value={importData}\n        onChange={(e) => setImportData(e.target.value)}\n        rows={10}\n        cols={50}\n        placeholder=\"Paste your game data here\"\n        style={{ backgroundColor: '#333', color: '#0f0', border: '1px solid #0a0', width: '100%', boxSizing: 'border-box' }}\n      />\n      <button onClick={handleImport}>Import from Textarea</button>\n      {message && <p>{message}</p>}\n    </div>\n  );\n};\nexport default SettingsScreen;"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,KAAQ,OAAO,CAAC,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBAOxC,KAAM,CAAAC,cAA6C,CAAGC,IAAA,EAA4B,IAA3B,CAAEC,QAAQ,CAAEC,QAAS,CAAC,CAAAF,IAAA,CAC3E,KAAM,CAACG,UAAU,CAAEC,aAAa,CAAC,CAAGV,QAAQ,CAAC,EAAE,CAAC,CAChD,KAAM,CAACW,OAAO,CAAEC,UAAU,CAAC,CAAGZ,QAAQ,CAAC,EAAE,CAAC,CAE1C,KAAM,CAAAa,YAAY,CAAGA,CAAA,GAAM,CACzB,KAAM,CAAAC,IAAI,CAAGP,QAAQ,CAAC,CAAC,CACvBQ,SAAS,CAACC,SAAS,CAACC,SAAS,CAACH,IAAI,CAAC,CAChCI,IAAI,CAAC,IAAMN,UAAU,CAAC,gCAAgC,CAAC,CAAC,CACxDO,KAAK,CAAC,IAAMP,UAAU,CAAC,qDAAqD,CAAC,CAAC,CACjFF,aAAa,CAACI,IAAI,CAAC,CAAE;AACvB,CAAC,CAED,KAAM,CAAAM,YAAY,CAAGA,CAAA,GAAM,CACzB,GAAIC,MAAM,CAACC,OAAO,CAAC,yEAAyE,CAAC,CAAE,CAC7F,GAAI,CACFd,QAAQ,CAACC,UAAU,CAAC,CACpBG,UAAU,CAAC,kCAAkC,CAAC,CAChD,CAAE,MAAOW,KAAK,CAAE,CACdX,UAAU,CAAC,oCAAoC,CAAC,CAChDY,OAAO,CAACD,KAAK,CAAC,eAAe,CAAEA,KAAK,CAAC,CACvC,CACF,CACF,CAAC,CAED,mBACEnB,KAAA,QAAAqB,QAAA,eACEvB,IAAA,OAAAuB,QAAA,CAAI,UAAQ,CAAI,CAAC,cACjBvB,IAAA,OAAAuB,QAAA,CAAI,aAAW,CAAI,CAAC,cACpBvB,IAAA,WAAQwB,OAAO,CAAEb,YAAa,CAAAY,QAAA,CAAC,gCAA8B,CAAQ,CAAC,cAEtEvB,IAAA,OAAAuB,QAAA,CAAI,aAAW,CAAI,CAAC,cACpBvB,IAAA,aACEyB,KAAK,CAAElB,UAAW,CAClBmB,QAAQ,CAAGC,CAAC,EAAKnB,aAAa,CAACmB,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE,CAC/CI,IAAI,CAAE,EAAG,CACTC,IAAI,CAAE,EAAG,CACTC,WAAW,CAAC,2BAA2B,CACvCC,KAAK,CAAE,CAAEC,eAAe,CAAE,MAAM,CAAEC,KAAK,CAAE,MAAM,CAAEC,MAAM,CAAE,gBAAgB,CAAEC,KAAK,CAAE,MAAM,CAAEC,SAAS,CAAE,YAAa,CAAE,CACrH,CAAC,cACFrC,IAAA,WAAQwB,OAAO,CAAEN,YAAa,CAAAK,QAAA,CAAC,sBAAoB,CAAQ,CAAC,CAC3Dd,OAAO,eAAIT,IAAA,MAAAuB,QAAA,CAAId,OAAO,CAAI,CAAC,EACzB,CAAC,CAEV,CAAC,CACD,cAAe,CAAAN,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}