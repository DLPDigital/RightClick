{"ast":null,"code":"import _objectSpread from\"/Users/dom/Desktop/github/RightClicker/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import React,{useState,useEffect,useCallback}from'react';import'./App.css';import{INSANITY_STAGES}from'./data/insanityLevels';import{INITIAL_UPGRADES}from'./data/upgrades';import{INITIAL_MONETIZATION_OPTIONS}from'./data/monetization';import{INITIAL_ACHIEVEMENTS}from'./data/achievements';import NavBar from'./components/NavBar';import StatusBar from'./components/StatusBar';import PostingScreen from'./screens/PostingScreen';import MonetizationScreen from'./screens/MonetizationScreen';import UpgradesScreen from'./screens/UpgradesScreen';import AchievementsScreen from'./screens/AchievementsScreen';import SettingsScreen from'./screens/SettingsScreen';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const SAVE_KEY='conspiracyClickerSave';const TICK_INTERVAL=100;// Milliseconds for game tick\nconst initialGameState={money:0,followers:0,postsMade:0,insanityLevelIndex:0,followersPerClick:1,passiveFollowersPerSecond:0,baseMoneyPerFollowerPerSecond:0.001,// Initial very small rate\nupgrades:JSON.parse(JSON.stringify(INITIAL_UPGRADES)),// Deep copy\nmonetizationOptions:JSON.parse(JSON.stringify(INITIAL_MONETIZATION_OPTIONS)),achievements:JSON.parse(JSON.stringify(INITIAL_ACHIEVEMENTS)),lastTick:Date.now()};function App(){const[gameState,setGameState]=useState(()=>{const savedGame=localStorage.getItem(SAVE_KEY);if(savedGame){try{const parsedGame=JSON.parse(savedGame);// Ensure all data structures are present, merge with defaults if not\nreturn _objectSpread(_objectSpread(_objectSpread({},initialGameState),parsedGame),{},{upgrades:_objectSpread(_objectSpread({},initialGameState.upgrades),parsedGame.upgrades),monetizationOptions:_objectSpread(_objectSpread({},initialGameState.monetizationOptions),parsedGame.monetizationOptions),achievements:_objectSpread(_objectSpread({},initialGameState.achievements),parsedGame.achievements),lastTick:Date.now()// Reset lastTick for calculating offline progress correctly\n});}catch(e){console.error(\"Failed to parse saved game, starting new.\",e);return _objectSpread(_objectSpread({},initialGameState),{},{lastTick:Date.now()});}}return _objectSpread(_objectSpread({},initialGameState),{},{lastTick:Date.now()});});const[currentScreen,setCurrentScreen]=useState('posting');// --- CORE GAME LOGIC ---\nconst calculateRates=useCallback(gs=>{let fpc=1;let pfps=0;let moneyPerFollowerBonusTotal=0;Object.values(gs.upgrades).forEach(upg=>{if(upg.level>0){if(upg.followersPerClickBonus)fpc+=upg.followersPerClickBonus*upg.level;if(upg.passiveFollowersPerSecondBonus)pfps+=upg.passiveFollowersPerSecondBonus*upg.level;if(upg.moneyPerFollowerBonus)moneyPerFollowerBonusTotal+=upg.moneyPerFollowerBonus*upg.level;}});return{calculatedFollowersPerClick:fpc,calculatedPassiveFollowersPerSecond:pfps,calculatedMoneyPerFollowerPerSecond:gs.baseMoneyPerFollowerPerSecond*(1+moneyPerFollowerBonusTotal)};},[]);// Game Tick\nuseEffect(()=>{const intervalId=setInterval(()=>{setGameState(prev=>{const now=Date.now();const deltaSeconds=(now-prev.lastTick)/1000;const rates=calculateRates(prev);let newFollowers=prev.followers+rates.calculatedPassiveFollowersPerSecond*deltaSeconds;let moneyFromFollowers=newFollowers*rates.calculatedMoneyPerFollowerPerSecond*deltaSeconds;let moneyFromMonetization=0;Object.values(prev.monetizationOptions).forEach(opt=>{if(opt.active){moneyFromMonetization+=opt.moneyPerSecond*deltaSeconds;}});let newMoney=prev.money+moneyFromFollowers+moneyFromMonetization;// Update Insanity Level\nlet newInsanityIndex=prev.insanityLevelIndex;for(let i=INSANITY_STAGES.length-1;i>=0;i--){if(prev.postsMade>=INSANITY_STAGES[i].threshold&&i>newInsanityIndex){newInsanityIndex=i;// Could add a notification here: \"You've reached a new level of insanity: ...\"\nbreak;}}const nextState=_objectSpread(_objectSpread({},prev),{},{money:newMoney,followers:newFollowers,insanityLevelIndex:newInsanityIndex,followersPerClick:rates.calculatedFollowersPerClick,passiveFollowersPerSecond:rates.calculatedPassiveFollowersPerSecond,// baseMoneyPerFollowerPerSecond is handled by upgrades now\nlastTick:now});// Check for unlocks (upgrades, monetization)\nObject.keys(nextState.upgrades).forEach(key=>{const upg=nextState.upgrades[key];if(!upg.unlocked&&upg.requirement&&upg.requirement(nextState)){nextState.upgrades[key]=_objectSpread(_objectSpread({},upg),{},{unlocked:true});}});Object.keys(nextState.monetizationOptions).forEach(key=>{const opt=nextState.monetizationOptions[key];if(!opt.unlocked&&opt.requirement&&opt.requirement(nextState)){nextState.monetizationOptions[key]=_objectSpread(_objectSpread({},opt),{},{unlocked:true});}});// Check Achievements\nObject.keys(nextState.achievements).forEach(key=>{const ach=nextState.achievements[key];if(!ach.unlocked&&ach.condition(nextState)){nextState.achievements[key]=_objectSpread(_objectSpread({},ach),{},{unlocked:true});console.log(\"Achievement Unlocked: \".concat(ach.name));// TODO: Better notification\nif(ach.reward){// This part is tricky, as reward might change state that affects conditions\n// For simplicity, apply rewards directly. Be cautious with complex rewards.\nconst rewardChanges=ach.reward(nextState);Object.assign(nextState,rewardChanges);}}});return nextState;});},TICK_INTERVAL);return()=>clearInterval(intervalId);},[calculateRates]);// Empty dependency array means this runs once on mount\n// Save game state whenever it changes\nuseEffect(()=>{localStorage.setItem(SAVE_KEY,JSON.stringify(gameState));},[gameState]);// --- ACTIONS ---\nconst handlePost=()=>{setGameState(prev=>_objectSpread(_objectSpread({},prev),{},{followers:prev.followers+prev.followersPerClick,postsMade:prev.postsMade+1}));};const handlePurchaseUpgrade=id=>{setGameState(prev=>{const upgrade=prev.upgrades[id];if(!upgrade||upgrade.maxLevel!==undefined&&upgrade.level>=upgrade.maxLevel)return prev;const cost=upgrade.baseCost*Math.pow(upgrade.costMultiplier,upgrade.level);if(prev.money>=cost){const newUpgrades=_objectSpread(_objectSpread({},prev.upgrades),{},{[id]:_objectSpread(_objectSpread({},upgrade),{},{level:upgrade.level+1})});// If this upgrade unlocks others\nif(upgrade.unlocks){upgrade.unlocks.forEach(unlockId=>{if(newUpgrades[unlockId]&&!newUpgrades[unlockId].unlocked){newUpgrades[unlockId]=_objectSpread(_objectSpread({},newUpgrades[unlockId]),{},{unlocked:true});}else if(prev.monetizationOptions[unlockId]&&!prev.monetizationOptions[unlockId].unlocked){// It might unlock a monetization option\n// This part needs a bit more robust handling if unlocks are mixed type\n}});}// Recalculate rates immediately after purchase for UI responsiveness\nconst rates=calculateRates(_objectSpread(_objectSpread({},prev),{},{upgrades:newUpgrades}));return _objectSpread(_objectSpread({},prev),{},{money:prev.money-cost,upgrades:newUpgrades,followersPerClick:rates.calculatedFollowersPerClick,passiveFollowersPerSecond:rates.calculatedPassiveFollowersPerSecond});}return prev;});};const handleActivateMonetization=id=>{setGameState(prev=>{const option=prev.monetizationOptions[id];if(!option||option.active)return prev;if(prev.money>=option.costToActivate&&prev.followers>=option.followerRequirement){return _objectSpread(_objectSpread({},prev),{},{money:prev.money-option.costToActivate,monetizationOptions:_objectSpread(_objectSpread({},prev.monetizationOptions),{},{[id]:_objectSpread(_objectSpread({},option),{},{active:true})})});}return prev;});};const handleExportGame=()=>{return JSON.stringify(gameState);};const handleImportGame=data=>{try{const importedState=JSON.parse(data);// Basic validation (can be more thorough)\nif(typeof importedState.money!=='number'||typeof importedState.followers!=='number'){throw new Error(\"Invalid save data structure.\");}setGameState(_objectSpread(_objectSpread(_objectSpread({},initialGameState),importedState),{},{// Overlay imported data\nupgrades:_objectSpread(_objectSpread({},initialGameState.upgrades),importedState.upgrades),// Merge deeply\nmonetizationOptions:_objectSpread(_objectSpread({},initialGameState.monetizationOptions),importedState.monetizationOptions),achievements:_objectSpread(_objectSpread({},initialGameState.achievements),importedState.achievements),lastTick:Date.now()// Reset tick to prevent huge offline jumps immediately\n}));}catch(e){console.error(\"Import failed:\",e);throw e;// Re-throw to be caught by SettingsScreen\n}};// --- RENDER LOGIC ---\nconst renderScreen=()=>{switch(currentScreen){case'posting':return/*#__PURE__*/_jsx(PostingScreen,{followers:gameState.followers,followersPerClick:gameState.followersPerClick,postsMade:gameState.postsMade,onPost:handlePost});case'monetization':return/*#__PURE__*/_jsx(MonetizationScreen,{gameState:gameState,onActivateMonetization:handleActivateMonetization});case'upgrades':return/*#__PURE__*/_jsx(UpgradesScreen,{gameState:gameState,onPurchaseUpgrade:handlePurchaseUpgrade});case'achievements':return/*#__PURE__*/_jsx(AchievementsScreen,{achievements:gameState.achievements});case'settings':return/*#__PURE__*/_jsx(SettingsScreen,{onExport:handleExportGame,onImport:handleImportGame});default:return/*#__PURE__*/_jsx(\"p\",{children:\"Unknown Screen\"});}};const currentInsanityStage=INSANITY_STAGES[gameState.insanityLevelIndex]||INSANITY_STAGES[0];return/*#__PURE__*/_jsxs(\"div\",{className:\"App\",children:[/*#__PURE__*/_jsx(StatusBar,{money:gameState.money,followers:gameState.followers,currentInsanityStage:currentInsanityStage}),/*#__PURE__*/_jsx(NavBar,{currentScreen:currentScreen,onNavigate:setCurrentScreen}),/*#__PURE__*/_jsx(\"div\",{className:\"screen-content\",children:renderScreen()}),/*#__PURE__*/_jsx(\"footer\",{children:/*#__PURE__*/_jsx(\"p\",{style:{fontSize:'0.8em',textAlign:'center',marginTop:'20px',color:'#080'},children:\"Conspiracy Clicker v0.1 - Remember, it's just a game... or is it?\"})})]});}export default App;","map":{"version":3,"names":["React","useState","useEffect","useCallback","INSANITY_STAGES","INITIAL_UPGRADES","INITIAL_MONETIZATION_OPTIONS","INITIAL_ACHIEVEMENTS","NavBar","StatusBar","PostingScreen","MonetizationScreen","UpgradesScreen","AchievementsScreen","SettingsScreen","jsx","_jsx","jsxs","_jsxs","SAVE_KEY","TICK_INTERVAL","initialGameState","money","followers","postsMade","insanityLevelIndex","followersPerClick","passiveFollowersPerSecond","baseMoneyPerFollowerPerSecond","upgrades","JSON","parse","stringify","monetizationOptions","achievements","lastTick","Date","now","App","gameState","setGameState","savedGame","localStorage","getItem","parsedGame","_objectSpread","e","console","error","currentScreen","setCurrentScreen","calculateRates","gs","fpc","pfps","moneyPerFollowerBonusTotal","Object","values","forEach","upg","level","followersPerClickBonus","passiveFollowersPerSecondBonus","moneyPerFollowerBonus","calculatedFollowersPerClick","calculatedPassiveFollowersPerSecond","calculatedMoneyPerFollowerPerSecond","intervalId","setInterval","prev","deltaSeconds","rates","newFollowers","moneyFromFollowers","moneyFromMonetization","opt","active","moneyPerSecond","newMoney","newInsanityIndex","i","length","threshold","nextState","keys","key","unlocked","requirement","ach","condition","log","concat","name","reward","rewardChanges","assign","clearInterval","setItem","handlePost","handlePurchaseUpgrade","id","upgrade","maxLevel","undefined","cost","baseCost","Math","pow","costMultiplier","newUpgrades","unlocks","unlockId","handleActivateMonetization","option","costToActivate","followerRequirement","handleExportGame","handleImportGame","data","importedState","Error","renderScreen","onPost","onActivateMonetization","onPurchaseUpgrade","onExport","onImport","children","currentInsanityStage","className","onNavigate","style","fontSize","textAlign","marginTop","color"],"sources":["/Users/dom/Desktop/github/RightClicker/src/App.tsx"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\nimport './App.css';\nimport { GameState, ScreenName, Upgrade, MonetizationOption, Achievement } from './types';\nimport { INSANITY_STAGES } from './data/insanityLevels';\nimport { INITIAL_UPGRADES } from './data/upgrades';\nimport { INITIAL_MONETIZATION_OPTIONS } from './data/monetization';\nimport { INITIAL_ACHIEVEMENTS } from './data/achievements';\n\nimport NavBar from './components/NavBar';\nimport StatusBar from './components/StatusBar';\nimport PostingScreen from './screens/PostingScreen';\nimport MonetizationScreen from './screens/MonetizationScreen';\nimport UpgradesScreen from './screens/UpgradesScreen';\nimport AchievementsScreen from './screens/AchievementsScreen';\nimport SettingsScreen from './screens/SettingsScreen';\n\nconst SAVE_KEY = 'conspiracyClickerSave';\nconst TICK_INTERVAL = 100; // Milliseconds for game tick\n\nconst initialGameState: GameState = {\n  money: 0,\n  followers: 0,\n  postsMade: 0,\n  insanityLevelIndex: 0,\n  followersPerClick: 1,\n  passiveFollowersPerSecond: 0,\n  baseMoneyPerFollowerPerSecond: 0.001, // Initial very small rate\n  upgrades: JSON.parse(JSON.stringify(INITIAL_UPGRADES)), // Deep copy\n  monetizationOptions: JSON.parse(JSON.stringify(INITIAL_MONETIZATION_OPTIONS)),\n  achievements: JSON.parse(JSON.stringify(INITIAL_ACHIEVEMENTS)),\n  lastTick: Date.now(),\n};\n\n\nfunction App() {\n  const [gameState, setGameState] = useState<GameState>(() => {\n    const savedGame = localStorage.getItem(SAVE_KEY);\n    if (savedGame) {\n      try {\n        const parsedGame = JSON.parse(savedGame) as GameState;\n        // Ensure all data structures are present, merge with defaults if not\n        return {\n          ...initialGameState,\n          ...parsedGame,\n          upgrades: { ...initialGameState.upgrades, ...parsedGame.upgrades },\n          monetizationOptions: { ...initialGameState.monetizationOptions, ...parsedGame.monetizationOptions },\n          achievements: { ...initialGameState.achievements, ...parsedGame.achievements },\n          lastTick: Date.now(), // Reset lastTick for calculating offline progress correctly\n        };\n      } catch (e) {\n        console.error(\"Failed to parse saved game, starting new.\", e);\n        return {...initialGameState, lastTick: Date.now()};\n      }\n    }\n    return {...initialGameState, lastTick: Date.now()};\n  });\n\n  const [currentScreen, setCurrentScreen] = useState<ScreenName>('posting');\n\n  // --- CORE GAME LOGIC ---\n\n  const calculateRates = useCallback((gs: GameState) => {\n    let fpc = 1;\n    let pfps = 0;\n    let moneyPerFollowerBonusTotal = 0;\n\n    Object.values(gs.upgrades).forEach(upg => {\n      if (upg.level > 0) {\n        if (upg.followersPerClickBonus) fpc += upg.followersPerClickBonus * upg.level;\n        if (upg.passiveFollowersPerSecondBonus) pfps += upg.passiveFollowersPerSecondBonus * upg.level;\n        if (upg.moneyPerFollowerBonus) moneyPerFollowerBonusTotal += upg.moneyPerFollowerBonus * upg.level;\n      }\n    });\n    return {\n        calculatedFollowersPerClick: fpc,\n        calculatedPassiveFollowersPerSecond: pfps,\n        calculatedMoneyPerFollowerPerSecond: gs.baseMoneyPerFollowerPerSecond * (1 + moneyPerFollowerBonusTotal)\n    };\n  }, []);\n\n\n  // Game Tick\n  useEffect(() => {\n    const intervalId = setInterval(() => {\n      setGameState(prev => {\n        const now = Date.now();\n        const deltaSeconds = (now - prev.lastTick) / 1000;\n        \n        const rates = calculateRates(prev);\n\n        let newFollowers = prev.followers + rates.calculatedPassiveFollowersPerSecond * deltaSeconds;\n        \n        let moneyFromFollowers = newFollowers * rates.calculatedMoneyPerFollowerPerSecond * deltaSeconds;\n        \n        let moneyFromMonetization = 0;\n        Object.values(prev.monetizationOptions).forEach(opt => {\n          if (opt.active) {\n            moneyFromMonetization += opt.moneyPerSecond * deltaSeconds;\n          }\n        });\n\n        let newMoney = prev.money + moneyFromFollowers + moneyFromMonetization;\n\n        // Update Insanity Level\n        let newInsanityIndex = prev.insanityLevelIndex;\n        for (let i = INSANITY_STAGES.length - 1; i >= 0; i--) {\n          if (prev.postsMade >= INSANITY_STAGES[i].threshold && i > newInsanityIndex) {\n            newInsanityIndex = i;\n            // Could add a notification here: \"You've reached a new level of insanity: ...\"\n            break;\n          }\n        }\n        \n        const nextState: GameState = {\n          ...prev,\n          money: newMoney,\n          followers: newFollowers,\n          insanityLevelIndex: newInsanityIndex,\n          followersPerClick: rates.calculatedFollowersPerClick,\n          passiveFollowersPerSecond: rates.calculatedPassiveFollowersPerSecond,\n          // baseMoneyPerFollowerPerSecond is handled by upgrades now\n          lastTick: now,\n        };\n\n        // Check for unlocks (upgrades, monetization)\n        Object.keys(nextState.upgrades).forEach(key => {\n            const upg = nextState.upgrades[key];\n            if (!upg.unlocked && upg.requirement && upg.requirement(nextState)) {\n                nextState.upgrades[key] = { ...upg, unlocked: true };\n            }\n        });\n        Object.keys(nextState.monetizationOptions).forEach(key => {\n            const opt = nextState.monetizationOptions[key];\n            if (!opt.unlocked && opt.requirement && opt.requirement(nextState)) {\n                nextState.monetizationOptions[key] = { ...opt, unlocked: true };\n            }\n        });\n        \n        // Check Achievements\n        Object.keys(nextState.achievements).forEach(key => {\n            const ach = nextState.achievements[key];\n            if (!ach.unlocked && ach.condition(nextState)) {\n                nextState.achievements[key] = { ...ach, unlocked: true };\n                console.log(`Achievement Unlocked: ${ach.name}`); // TODO: Better notification\n                if (ach.reward) {\n                    // This part is tricky, as reward might change state that affects conditions\n                    // For simplicity, apply rewards directly. Be cautious with complex rewards.\n                    const rewardChanges = ach.reward(nextState);\n                    Object.assign(nextState, rewardChanges);\n                }\n            }\n        });\n        \n        return nextState;\n      });\n    }, TICK_INTERVAL);\n\n    return () => clearInterval(intervalId);\n  }, [calculateRates]); // Empty dependency array means this runs once on mount\n\n  // Save game state whenever it changes\n  useEffect(() => {\n    localStorage.setItem(SAVE_KEY, JSON.stringify(gameState));\n  }, [gameState]);\n\n\n  // --- ACTIONS ---\n  const handlePost = () => {\n    setGameState(prev => ({\n      ...prev,\n      followers: prev.followers + prev.followersPerClick,\n      postsMade: prev.postsMade + 1,\n    }));\n  };\n\n  const handlePurchaseUpgrade = (id: string) => {\n    setGameState(prev => {\n      const upgrade = prev.upgrades[id];\n      if (!upgrade || (upgrade.maxLevel !== undefined && upgrade.level >= upgrade.maxLevel)) return prev;\n\n      const cost = upgrade.baseCost * Math.pow(upgrade.costMultiplier, upgrade.level);\n      if (prev.money >= cost) {\n        const newUpgrades = {\n          ...prev.upgrades,\n          [id]: { ...upgrade, level: upgrade.level + 1 }\n        };\n\n        // If this upgrade unlocks others\n        if (upgrade.unlocks) {\n            upgrade.unlocks.forEach(unlockId => {\n                if (newUpgrades[unlockId] && !newUpgrades[unlockId].unlocked) {\n                    newUpgrades[unlockId] = { ...newUpgrades[unlockId], unlocked: true };\n                } else if (prev.monetizationOptions[unlockId] && !prev.monetizationOptions[unlockId].unlocked) {\n                    // It might unlock a monetization option\n                    // This part needs a bit more robust handling if unlocks are mixed type\n                }\n            });\n        }\n        \n        // Recalculate rates immediately after purchase for UI responsiveness\n        const rates = calculateRates({...prev, upgrades: newUpgrades});\n\n        return {\n          ...prev,\n          money: prev.money - cost,\n          upgrades: newUpgrades,\n          followersPerClick: rates.calculatedFollowersPerClick,\n          passiveFollowersPerSecond: rates.calculatedPassiveFollowersPerSecond,\n        };\n      }\n      return prev;\n    });\n  };\n\n  const handleActivateMonetization = (id: string) => {\n    setGameState(prev => {\n      const option = prev.monetizationOptions[id];\n      if (!option || option.active) return prev;\n\n      if (prev.money >= option.costToActivate && prev.followers >= option.followerRequirement) {\n        return {\n          ...prev,\n          money: prev.money - option.costToActivate,\n          monetizationOptions: {\n            ...prev.monetizationOptions,\n            [id]: { ...option, active: true }\n          }\n        };\n      }\n      return prev;\n    });\n  };\n\n  const handleExportGame = () => {\n    return JSON.stringify(gameState);\n  };\n\n  const handleImportGame = (data: string) => {\n    try {\n      const importedState = JSON.parse(data) as GameState;\n      // Basic validation (can be more thorough)\n      if (typeof importedState.money !== 'number' || typeof importedState.followers !== 'number') {\n        throw new Error(\"Invalid save data structure.\");\n      }\n       setGameState({\n        ...initialGameState, // Start with defaults to ensure all keys exist\n        ...importedState,    // Overlay imported data\n        upgrades: { ...initialGameState.upgrades, ...importedState.upgrades }, // Merge deeply\n        monetizationOptions: { ...initialGameState.monetizationOptions, ...importedState.monetizationOptions },\n        achievements: { ...initialGameState.achievements, ...importedState.achievements },\n        lastTick: Date.now(), // Reset tick to prevent huge offline jumps immediately\n      });\n    } catch (e) {\n      console.error(\"Import failed:\", e);\n      throw e; // Re-throw to be caught by SettingsScreen\n    }\n  };\n\n  // --- RENDER LOGIC ---\n  const renderScreen = () => {\n    switch (currentScreen) {\n      case 'posting':\n        return <PostingScreen\n          followers={gameState.followers}\n          followersPerClick={gameState.followersPerClick}\n          postsMade={gameState.postsMade}\n          onPost={handlePost}\n        />;\n      case 'monetization':\n        return <MonetizationScreen gameState={gameState} onActivateMonetization={handleActivateMonetization} />;\n      case 'upgrades':\n        return <UpgradesScreen gameState={gameState} onPurchaseUpgrade={handlePurchaseUpgrade} />;\n      case 'achievements':\n        return <AchievementsScreen achievements={gameState.achievements} />;\n      case 'settings':\n        return <SettingsScreen onExport={handleExportGame} onImport={handleImportGame} />;\n      default:\n        return <p>Unknown Screen</p>;\n    }\n  };\n\n  const currentInsanityStage = INSANITY_STAGES[gameState.insanityLevelIndex] || INSANITY_STAGES[0];\n\n  return (\n    <div className=\"App\">\n      <StatusBar\n        money={gameState.money}\n        followers={gameState.followers}\n        currentInsanityStage={currentInsanityStage}\n      />\n      <NavBar currentScreen={currentScreen} onNavigate={setCurrentScreen} />\n      <div className=\"screen-content\">\n        {renderScreen()}\n      </div>\n      <footer>\n        <p style={{fontSize: '0.8em', textAlign: 'center', marginTop: '20px', color: '#080'}}>\n          Conspiracy Clicker v0.1 - Remember, it's just a game... or is it?\n        </p>\n      </footer>\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}