{"ast":null,"code":"var _jsxFileName = \"/Users/dom/Desktop/github/RightClicker/src/App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport './App.css';\nimport { INSANITY_STAGES } from './data/insanityLevels';\nimport { INITIAL_UPGRADES } from './data/upgrades';\nimport { INITIAL_MONETIZATION_OPTIONS } from './data/monetization';\nimport { INITIAL_ACHIEVEMENTS } from './data/achievements';\nimport NavBar from './components/NavBar';\nimport StatusBar from './components/StatusBar';\nimport PostingScreen from './screens/PostingScreen';\nimport MonetizationScreen from './screens/MonetizationScreen';\nimport UpgradesScreen from './screens/UpgradesScreen';\nimport AchievementsScreen from './screens/AchievementsScreen';\nimport SettingsScreen from './screens/SettingsScreen';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SAVE_KEY = 'conspiracyClickerSave';\nconst TICK_INTERVAL = 100; // Milliseconds for game tick\n\nconst initialGameState = {\n  money: 0,\n  followers: 0,\n  postsMade: 0,\n  insanityLevelIndex: 0,\n  followersPerClick: 1,\n  passiveFollowersPerSecond: 0,\n  baseMoneyPerFollowerPerSecond: 0.001,\n  upgrades: JSON.parse(JSON.stringify(INITIAL_UPGRADES)),\n  // This is fine as upgrades don't have functions\n  monetizationOptions: JSON.parse(JSON.stringify(INITIAL_MONETIZATION_OPTIONS)),\n  achievements: INITIAL_ACHIEVEMENTS,\n  // Direct reference instead of deep copy\n  lastTick: Date.now()\n};\n;\nfunction App() {\n  _s();\n  const [gameState, setGameState] = useState(() => {\n    const savedGame = localStorage.getItem(SAVE_KEY);\n    if (savedGame) {\n      try {\n        const parsedGame = JSON.parse(savedGame);\n        return {\n          ...initialGameState,\n          ...parsedGame,\n          upgrades: {\n            ...initialGameState.upgrades,\n            ...parsedGame.upgrades\n          },\n          monetizationOptions: {\n            ...initialGameState.monetizationOptions,\n            ...parsedGame.monetizationOptions\n          },\n          // Preserve the condition functions from INITIAL_ACHIEVEMENTS\n          achievements: Object.keys(parsedGame.achievements).reduce((acc, key) => ({\n            ...acc,\n            [key]: {\n              ...INITIAL_ACHIEVEMENTS[key],\n              unlocked: parsedGame.achievements[key].unlocked\n            }\n          }), INITIAL_ACHIEVEMENTS),\n          lastTick: Date.now()\n        };\n      } catch (e) {\n        console.error(\"Failed to parse saved game, starting new.\", e);\n        return {\n          ...initialGameState,\n          lastTick: Date.now()\n        };\n      }\n    }\n    return {\n      ...initialGameState,\n      lastTick: Date.now()\n    };\n  });\n  const [currentScreen, setCurrentScreen] = useState('posting');\n\n  // --- CORE GAME LOGIC ---\n\n  const calculateRates = useCallback(gs => {\n    let fpc = 1;\n    let pfps = 0;\n    let moneyPerFollowerBonusTotal = 0;\n    Object.values(gs.upgrades).forEach(upg => {\n      if (upg.level > 0) {\n        if (upg.followersPerClickBonus) fpc += upg.followersPerClickBonus * upg.level;\n        if (upg.passiveFollowersPerSecondBonus) pfps += upg.passiveFollowersPerSecondBonus * upg.level;\n        if (upg.moneyPerFollowerBonus) moneyPerFollowerBonusTotal += upg.moneyPerFollowerBonus * upg.level;\n      }\n    });\n    return {\n      calculatedFollowersPerClick: fpc,\n      calculatedPassiveFollowersPerSecond: pfps,\n      calculatedMoneyPerFollowerPerSecond: gs.baseMoneyPerFollowerPerSecond * (1 + moneyPerFollowerBonusTotal)\n    };\n  }, []);\n\n  // Game Tick\n  useEffect(() => {\n    const intervalId = setInterval(() => {\n      setGameState(prev => {\n        const now = Date.now();\n        const deltaSeconds = (now - prev.lastTick) / 1000;\n        const rates = calculateRates(prev);\n        let newFollowers = prev.followers + rates.calculatedPassiveFollowersPerSecond * deltaSeconds;\n        let moneyFromFollowers = newFollowers * rates.calculatedMoneyPerFollowerPerSecond * deltaSeconds;\n        let moneyFromMonetization = 0;\n        Object.values(prev.monetizationOptions).forEach(opt => {\n          if (opt.active) {\n            moneyFromMonetization += opt.moneyPerSecond * deltaSeconds;\n          }\n        });\n        let newMoney = prev.money + moneyFromFollowers + moneyFromMonetization;\n\n        // Update Insanity Level\n        let newInsanityIndex = prev.insanityLevelIndex;\n        for (let i = INSANITY_STAGES.length - 1; i >= 0; i--) {\n          if (prev.postsMade >= INSANITY_STAGES[i].threshold && i > newInsanityIndex) {\n            newInsanityIndex = i;\n            // Could add a notification here: \"You've reached a new level of insanity: ...\"\n            break;\n          }\n        }\n        const nextState = {\n          ...prev,\n          money: newMoney,\n          followers: newFollowers,\n          insanityLevelIndex: newInsanityIndex,\n          followersPerClick: rates.calculatedFollowersPerClick,\n          passiveFollowersPerSecond: rates.calculatedPassiveFollowersPerSecond,\n          // baseMoneyPerFollowerPerSecond is handled by upgrades now\n          lastTick: now\n        };\n\n        // Check for unlocks (upgrades, monetization)\n        Object.keys(nextState.upgrades).forEach(key => {\n          const upg = nextState.upgrades[key];\n          if (!upg.unlocked && upg.requirement && upg.requirement(nextState)) {\n            nextState.upgrades[key] = {\n              ...upg,\n              unlocked: true\n            };\n          }\n        });\n        Object.keys(nextState.monetizationOptions).forEach(key => {\n          const opt = nextState.monetizationOptions[key];\n          if (!opt.unlocked && opt.requirement && opt.requirement(nextState)) {\n            nextState.monetizationOptions[key] = {\n              ...opt,\n              unlocked: true\n            };\n          }\n        });\n\n        // Check Achievements\n        Object.keys(nextState.achievements).forEach(key => {\n          const ach = nextState.achievements[key];\n          if (!ach.unlocked && ach.condition(nextState)) {\n            nextState.achievements[key] = {\n              ...ach,\n              unlocked: true\n            };\n            console.log(`Achievement Unlocked: ${ach.name}`); // TODO: Better notification\n            if (ach.reward) {\n              // This part is tricky, as reward might change state that affects conditions\n              // For simplicity, apply rewards directly. Be cautious with complex rewards.\n              const rewardChanges = ach.reward(nextState);\n              Object.assign(nextState, rewardChanges);\n            }\n          }\n        });\n        return nextState;\n      });\n    }, TICK_INTERVAL);\n    return () => clearInterval(intervalId);\n  }, [calculateRates]); // Empty dependency array means this runs once on mount\n\n  // Save game state whenever it changes\n  useEffect(() => {\n    localStorage.setItem(SAVE_KEY, JSON.stringify(gameState));\n  }, [gameState]);\n\n  // --- ACTIONS ---\n  const handlePost = () => {\n    setGameState(prev => ({\n      ...prev,\n      followers: prev.followers + prev.followersPerClick,\n      postsMade: prev.postsMade + 1\n    }));\n  };\n  const handlePurchaseUpgrade = id => {\n    setGameState(prev => {\n      const upgrade = prev.upgrades[id];\n      if (!upgrade || upgrade.maxLevel !== undefined && upgrade.level >= upgrade.maxLevel) return prev;\n      const cost = upgrade.baseCost * Math.pow(upgrade.costMultiplier, upgrade.level);\n      if (prev.money >= cost) {\n        const newUpgrades = {\n          ...prev.upgrades,\n          [id]: {\n            ...upgrade,\n            level: upgrade.level + 1\n          }\n        };\n\n        // If this upgrade unlocks others\n        if (upgrade.unlocks) {\n          upgrade.unlocks.forEach(unlockId => {\n            if (newUpgrades[unlockId] && !newUpgrades[unlockId].unlocked) {\n              newUpgrades[unlockId] = {\n                ...newUpgrades[unlockId],\n                unlocked: true\n              };\n            } else if (prev.monetizationOptions[unlockId] && !prev.monetizationOptions[unlockId].unlocked) {\n              // It might unlock a monetization option\n              // This part needs a bit more robust handling if unlocks are mixed type\n            }\n          });\n        }\n\n        // Recalculate rates immediately after purchase for UI responsiveness\n        const rates = calculateRates({\n          ...prev,\n          upgrades: newUpgrades\n        });\n        return {\n          ...prev,\n          money: prev.money - cost,\n          upgrades: newUpgrades,\n          followersPerClick: rates.calculatedFollowersPerClick,\n          passiveFollowersPerSecond: rates.calculatedPassiveFollowersPerSecond\n        };\n      }\n      return prev;\n    });\n  };\n  const handleActivateMonetization = id => {\n    setGameState(prev => {\n      const option = prev.monetizationOptions[id];\n      if (!option || option.active) return prev;\n      if (prev.money >= option.costToActivate && prev.followers >= option.followerRequirement) {\n        return {\n          ...prev,\n          money: prev.money - option.costToActivate,\n          monetizationOptions: {\n            ...prev.monetizationOptions,\n            [id]: {\n              ...option,\n              active: true\n            }\n          }\n        };\n      }\n      return prev;\n    });\n  };\n  const handleExportGame = () => {\n    return JSON.stringify(gameState);\n  };\n  const handleImportGame = data => {\n    try {\n      const importedState = JSON.parse(data);\n      // Basic validation (can be more thorough)\n      if (typeof importedState.money !== 'number' || typeof importedState.followers !== 'number') {\n        throw new Error(\"Invalid save data structure.\");\n      }\n      setGameState({\n        ...initialGameState,\n        // Start with defaults to ensure all keys exist\n        ...importedState,\n        // Overlay imported data\n        upgrades: {\n          ...initialGameState.upgrades,\n          ...importedState.upgrades\n        },\n        // Merge deeply\n        monetizationOptions: {\n          ...initialGameState.monetizationOptions,\n          ...importedState.monetizationOptions\n        },\n        achievements: {\n          ...initialGameState.achievements,\n          ...importedState.achievements\n        },\n        lastTick: Date.now() // Reset tick to prevent huge offline jumps immediately\n      });\n    } catch (e) {\n      console.error(\"Import failed:\", e);\n      throw e; // Re-throw to be caught by SettingsScreen\n    }\n  };\n\n  // --- RENDER LOGIC ---\n  const renderScreen = () => {\n    switch (currentScreen) {\n      case 'posting':\n        return /*#__PURE__*/_jsxDEV(PostingScreen, {\n          followers: gameState.followers,\n          followersPerClick: gameState.followersPerClick,\n          postsMade: gameState.postsMade,\n          onPost: handlePost\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 269,\n          columnNumber: 16\n        }, this);\n      case 'monetization':\n        return /*#__PURE__*/_jsxDEV(MonetizationScreen, {\n          gameState: gameState,\n          onActivateMonetization: handleActivateMonetization\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 276,\n          columnNumber: 16\n        }, this);\n      case 'upgrades':\n        return /*#__PURE__*/_jsxDEV(UpgradesScreen, {\n          gameState: gameState,\n          onPurchaseUpgrade: handlePurchaseUpgrade\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 278,\n          columnNumber: 16\n        }, this);\n      case 'achievements':\n        return /*#__PURE__*/_jsxDEV(AchievementsScreen, {\n          achievements: gameState.achievements\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 280,\n          columnNumber: 16\n        }, this);\n      case 'settings':\n        return /*#__PURE__*/_jsxDEV(SettingsScreen, {\n          onExport: handleExportGame,\n          onImport: handleImportGame\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 282,\n          columnNumber: 16\n        }, this);\n      default:\n        return /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Unknown Screen\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 284,\n          columnNumber: 16\n        }, this);\n    }\n  };\n  const currentInsanityStage = INSANITY_STAGES[gameState.insanityLevelIndex] || INSANITY_STAGES[0];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(StatusBar, {\n      money: gameState.money,\n      followers: gameState.followers,\n      currentInsanityStage: currentInsanityStage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 292,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(NavBar, {\n      currentScreen: currentScreen,\n      onNavigate: setCurrentScreen\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 297,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"screen-content\",\n      children: renderScreen()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 298,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"footer\", {\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          fontSize: '0.8em',\n          textAlign: 'center',\n          marginTop: '20px',\n          color: '#080'\n        },\n        children: \"Conspiracy Clicker v0.1 - Remember, it's just a game... or is it?\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 302,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 301,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 291,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"cfs+DugzLZagvFthNxieOwbg6yc=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","INSANITY_STAGES","INITIAL_UPGRADES","INITIAL_MONETIZATION_OPTIONS","INITIAL_ACHIEVEMENTS","NavBar","StatusBar","PostingScreen","MonetizationScreen","UpgradesScreen","AchievementsScreen","SettingsScreen","jsxDEV","_jsxDEV","SAVE_KEY","TICK_INTERVAL","initialGameState","money","followers","postsMade","insanityLevelIndex","followersPerClick","passiveFollowersPerSecond","baseMoneyPerFollowerPerSecond","upgrades","JSON","parse","stringify","monetizationOptions","achievements","lastTick","Date","now","App","_s","gameState","setGameState","savedGame","localStorage","getItem","parsedGame","Object","keys","reduce","acc","key","unlocked","e","console","error","currentScreen","setCurrentScreen","calculateRates","gs","fpc","pfps","moneyPerFollowerBonusTotal","values","forEach","upg","level","followersPerClickBonus","passiveFollowersPerSecondBonus","moneyPerFollowerBonus","calculatedFollowersPerClick","calculatedPassiveFollowersPerSecond","calculatedMoneyPerFollowerPerSecond","intervalId","setInterval","prev","deltaSeconds","rates","newFollowers","moneyFromFollowers","moneyFromMonetization","opt","active","moneyPerSecond","newMoney","newInsanityIndex","i","length","threshold","nextState","requirement","ach","condition","log","name","reward","rewardChanges","assign","clearInterval","setItem","handlePost","handlePurchaseUpgrade","id","upgrade","maxLevel","undefined","cost","baseCost","Math","pow","costMultiplier","newUpgrades","unlocks","unlockId","handleActivateMonetization","option","costToActivate","followerRequirement","handleExportGame","handleImportGame","data","importedState","Error","renderScreen","onPost","fileName","_jsxFileName","lineNumber","columnNumber","onActivateMonetization","onPurchaseUpgrade","onExport","onImport","children","currentInsanityStage","className","onNavigate","style","fontSize","textAlign","marginTop","color","_c","$RefreshReg$"],"sources":["/Users/dom/Desktop/github/RightClicker/src/App.tsx"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\nimport './App.css';\nimport { GameState, ScreenName, Upgrade, MonetizationOption, Achievement } from './types';\nimport { INSANITY_STAGES } from './data/insanityLevels';\nimport { INITIAL_UPGRADES } from './data/upgrades';\nimport { INITIAL_MONETIZATION_OPTIONS } from './data/monetization';\nimport { INITIAL_ACHIEVEMENTS } from './data/achievements';\n\nimport NavBar from './components/NavBar';\nimport StatusBar from './components/StatusBar';\nimport PostingScreen from './screens/PostingScreen';\nimport MonetizationScreen from './screens/MonetizationScreen';\nimport UpgradesScreen from './screens/UpgradesScreen';\nimport AchievementsScreen from './screens/AchievementsScreen';\nimport SettingsScreen from './screens/SettingsScreen';\n\nconst SAVE_KEY = 'conspiracyClickerSave';\nconst TICK_INTERVAL = 100; // Milliseconds for game tick\n\nconst initialGameState: GameState = {\n  money: 0,\n  followers: 0,\n  postsMade: 0,\n  insanityLevelIndex: 0,\n  followersPerClick: 1,\n  passiveFollowersPerSecond: 0,\n  baseMoneyPerFollowerPerSecond: 0.001,\n  upgrades: JSON.parse(JSON.stringify(INITIAL_UPGRADES)), // This is fine as upgrades don't have functions\n  monetizationOptions: JSON.parse(JSON.stringify(INITIAL_MONETIZATION_OPTIONS)),\n  achievements: INITIAL_ACHIEVEMENTS, // Direct reference instead of deep copy\n  lastTick: Date.now(),\n};;\n\n\nfunction App() {\n  const [gameState, setGameState] = useState<GameState>(() => {\n    const savedGame = localStorage.getItem(SAVE_KEY);\n    if (savedGame) {\n      try {\n        const parsedGame = JSON.parse(savedGame) as GameState;\n        return {\n          ...initialGameState,\n          ...parsedGame,\n          upgrades: { ...initialGameState.upgrades, ...parsedGame.upgrades },\n          monetizationOptions: { ...initialGameState.monetizationOptions, ...parsedGame.monetizationOptions },\n          // Preserve the condition functions from INITIAL_ACHIEVEMENTS\n          achievements: Object.keys(parsedGame.achievements).reduce((acc, key) => ({\n            ...acc,\n            [key]: {\n              ...INITIAL_ACHIEVEMENTS[key],\n              unlocked: parsedGame.achievements[key].unlocked\n            }\n          }), INITIAL_ACHIEVEMENTS),\n          lastTick: Date.now(),\n        };\n      } catch (e) {\n        console.error(\"Failed to parse saved game, starting new.\", e);\n        return {...initialGameState, lastTick: Date.now()};\n      }\n    }\n    return {...initialGameState, lastTick: Date.now()};\n  });\n\n  const [currentScreen, setCurrentScreen] = useState<ScreenName>('posting');\n\n  // --- CORE GAME LOGIC ---\n\n  const calculateRates = useCallback((gs: GameState) => {\n    let fpc = 1;\n    let pfps = 0;\n    let moneyPerFollowerBonusTotal = 0;\n\n    Object.values(gs.upgrades).forEach(upg => {\n      if (upg.level > 0) {\n        if (upg.followersPerClickBonus) fpc += upg.followersPerClickBonus * upg.level;\n        if (upg.passiveFollowersPerSecondBonus) pfps += upg.passiveFollowersPerSecondBonus * upg.level;\n        if (upg.moneyPerFollowerBonus) moneyPerFollowerBonusTotal += upg.moneyPerFollowerBonus * upg.level;\n      }\n    });\n    return {\n        calculatedFollowersPerClick: fpc,\n        calculatedPassiveFollowersPerSecond: pfps,\n        calculatedMoneyPerFollowerPerSecond: gs.baseMoneyPerFollowerPerSecond * (1 + moneyPerFollowerBonusTotal)\n    };\n  }, []);\n\n\n  // Game Tick\n  useEffect(() => {\n    const intervalId = setInterval(() => {\n      setGameState(prev => {\n        const now = Date.now();\n        const deltaSeconds = (now - prev.lastTick) / 1000;\n        \n        const rates = calculateRates(prev);\n\n        let newFollowers = prev.followers + rates.calculatedPassiveFollowersPerSecond * deltaSeconds;\n        \n        let moneyFromFollowers = newFollowers * rates.calculatedMoneyPerFollowerPerSecond * deltaSeconds;\n        \n        let moneyFromMonetization = 0;\n        Object.values(prev.monetizationOptions).forEach(opt => {\n          if (opt.active) {\n            moneyFromMonetization += opt.moneyPerSecond * deltaSeconds;\n          }\n        });\n\n        let newMoney = prev.money + moneyFromFollowers + moneyFromMonetization;\n\n        // Update Insanity Level\n        let newInsanityIndex = prev.insanityLevelIndex;\n        for (let i = INSANITY_STAGES.length - 1; i >= 0; i--) {\n          if (prev.postsMade >= INSANITY_STAGES[i].threshold && i > newInsanityIndex) {\n            newInsanityIndex = i;\n            // Could add a notification here: \"You've reached a new level of insanity: ...\"\n            break;\n          }\n        }\n        \n        const nextState: GameState = {\n          ...prev,\n          money: newMoney,\n          followers: newFollowers,\n          insanityLevelIndex: newInsanityIndex,\n          followersPerClick: rates.calculatedFollowersPerClick,\n          passiveFollowersPerSecond: rates.calculatedPassiveFollowersPerSecond,\n          // baseMoneyPerFollowerPerSecond is handled by upgrades now\n          lastTick: now,\n        };\n\n        // Check for unlocks (upgrades, monetization)\n        Object.keys(nextState.upgrades).forEach(key => {\n            const upg = nextState.upgrades[key];\n            if (!upg.unlocked && upg.requirement && upg.requirement(nextState)) {\n                nextState.upgrades[key] = { ...upg, unlocked: true };\n            }\n        });\n        Object.keys(nextState.monetizationOptions).forEach(key => {\n            const opt = nextState.monetizationOptions[key];\n            if (!opt.unlocked && opt.requirement && opt.requirement(nextState)) {\n                nextState.monetizationOptions[key] = { ...opt, unlocked: true };\n            }\n        });\n        \n        // Check Achievements\n        Object.keys(nextState.achievements).forEach(key => {\n            const ach = nextState.achievements[key];\n            if (!ach.unlocked && ach.condition(nextState)) {\n                nextState.achievements[key] = { ...ach, unlocked: true };\n                console.log(`Achievement Unlocked: ${ach.name}`); // TODO: Better notification\n                if (ach.reward) {\n                    // This part is tricky, as reward might change state that affects conditions\n                    // For simplicity, apply rewards directly. Be cautious with complex rewards.\n                    const rewardChanges = ach.reward(nextState);\n                    Object.assign(nextState, rewardChanges);\n                }\n            }\n        });\n        \n        return nextState;\n      });\n    }, TICK_INTERVAL);\n\n    return () => clearInterval(intervalId);\n  }, [calculateRates]); // Empty dependency array means this runs once on mount\n\n  // Save game state whenever it changes\n  useEffect(() => {\n    localStorage.setItem(SAVE_KEY, JSON.stringify(gameState));\n  }, [gameState]);\n\n\n  // --- ACTIONS ---\n  const handlePost = () => {\n    setGameState(prev => ({\n      ...prev,\n      followers: prev.followers + prev.followersPerClick,\n      postsMade: prev.postsMade + 1,\n    }));\n  };\n\n  const handlePurchaseUpgrade = (id: string) => {\n    setGameState(prev => {\n      const upgrade = prev.upgrades[id];\n      if (!upgrade || (upgrade.maxLevel !== undefined && upgrade.level >= upgrade.maxLevel)) return prev;\n\n      const cost = upgrade.baseCost * Math.pow(upgrade.costMultiplier, upgrade.level);\n      if (prev.money >= cost) {\n        const newUpgrades = {\n          ...prev.upgrades,\n          [id]: { ...upgrade, level: upgrade.level + 1 }\n        };\n\n        // If this upgrade unlocks others\n        if (upgrade.unlocks) {\n            upgrade.unlocks.forEach(unlockId => {\n                if (newUpgrades[unlockId] && !newUpgrades[unlockId].unlocked) {\n                    newUpgrades[unlockId] = { ...newUpgrades[unlockId], unlocked: true };\n                } else if (prev.monetizationOptions[unlockId] && !prev.monetizationOptions[unlockId].unlocked) {\n                    // It might unlock a monetization option\n                    // This part needs a bit more robust handling if unlocks are mixed type\n                }\n            });\n        }\n        \n        // Recalculate rates immediately after purchase for UI responsiveness\n        const rates = calculateRates({...prev, upgrades: newUpgrades});\n\n        return {\n          ...prev,\n          money: prev.money - cost,\n          upgrades: newUpgrades,\n          followersPerClick: rates.calculatedFollowersPerClick,\n          passiveFollowersPerSecond: rates.calculatedPassiveFollowersPerSecond,\n        };\n      }\n      return prev;\n    });\n  };\n\n  const handleActivateMonetization = (id: string) => {\n    setGameState(prev => {\n      const option = prev.monetizationOptions[id];\n      if (!option || option.active) return prev;\n\n      if (prev.money >= option.costToActivate && prev.followers >= option.followerRequirement) {\n        return {\n          ...prev,\n          money: prev.money - option.costToActivate,\n          monetizationOptions: {\n            ...prev.monetizationOptions,\n            [id]: { ...option, active: true }\n          }\n        };\n      }\n      return prev;\n    });\n  };\n\n  const handleExportGame = () => {\n    return JSON.stringify(gameState);\n  };\n\n  const handleImportGame = (data: string) => {\n    try {\n      const importedState = JSON.parse(data) as GameState;\n      // Basic validation (can be more thorough)\n      if (typeof importedState.money !== 'number' || typeof importedState.followers !== 'number') {\n        throw new Error(\"Invalid save data structure.\");\n      }\n       setGameState({\n        ...initialGameState, // Start with defaults to ensure all keys exist\n        ...importedState,    // Overlay imported data\n        upgrades: { ...initialGameState.upgrades, ...importedState.upgrades }, // Merge deeply\n        monetizationOptions: { ...initialGameState.monetizationOptions, ...importedState.monetizationOptions },\n        achievements: { ...initialGameState.achievements, ...importedState.achievements },\n        lastTick: Date.now(), // Reset tick to prevent huge offline jumps immediately\n      });\n    } catch (e) {\n      console.error(\"Import failed:\", e);\n      throw e; // Re-throw to be caught by SettingsScreen\n    }\n  };\n\n  // --- RENDER LOGIC ---\n  const renderScreen = () => {\n    switch (currentScreen) {\n      case 'posting':\n        return <PostingScreen\n          followers={gameState.followers}\n          followersPerClick={gameState.followersPerClick}\n          postsMade={gameState.postsMade}\n          onPost={handlePost}\n        />;\n      case 'monetization':\n        return <MonetizationScreen gameState={gameState} onActivateMonetization={handleActivateMonetization} />;\n      case 'upgrades':\n        return <UpgradesScreen gameState={gameState} onPurchaseUpgrade={handlePurchaseUpgrade} />;\n      case 'achievements':\n        return <AchievementsScreen achievements={gameState.achievements} />;\n      case 'settings':\n        return <SettingsScreen onExport={handleExportGame} onImport={handleImportGame} />;\n      default:\n        return <p>Unknown Screen</p>;\n    }\n  };\n\n  const currentInsanityStage = INSANITY_STAGES[gameState.insanityLevelIndex] || INSANITY_STAGES[0];\n\n  return (\n    <div className=\"App\">\n      <StatusBar\n        money={gameState.money}\n        followers={gameState.followers}\n        currentInsanityStage={currentInsanityStage}\n      />\n      <NavBar currentScreen={currentScreen} onNavigate={setCurrentScreen} />\n      <div className=\"screen-content\">\n        {renderScreen()}\n      </div>\n      <footer>\n        <p style={{fontSize: '0.8em', textAlign: 'center', marginTop: '20px', color: '#080'}}>\n          Conspiracy Clicker v0.1 - Remember, it's just a game... or is it?\n        </p>\n      </footer>\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}